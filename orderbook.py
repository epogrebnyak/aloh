from dataclasses import dataclassimport pulp # Оптимизационная модель@dataclassclass Order:    """Параметры заказа."""    day: int    volume: float    price: floatorder_dict = dict()order_dict["A"] = [    Order(day=3, volume=180, price=13),    Order(day=4, volume=160, price=16),    Order(day=0, volume=120, price=12),    Order(day=4, volume=140, price=15),    Order(day=3, volume=280, price=16),    Order(day=4, volume=260, price=15),    Order(day=5, volume=240, price=12),    Order(day=1, volume=280, price=16),    Order(day=6, volume=160, price=17),    Order(day=4, volume=120, price=16),    Order(day=2, volume=60, price=12),]    def accept_dict(order_dict):    """Cоздать бинарные переменные (принят/не принят заказ).       вида <P>_AcceptOrder_<k>    """    accept_dict = {p: dict() for p in order_dict.keys()}    for p, orders in order_dict.items():        order_nums = range(len(orders))        accept_dict[p] = pulp.LpVariable.dicts(            f"{p}_AcceptOrder", order_nums, cat="Binary"        )    return accept_dictaccept_dict = accept_dict(order_dict)def empty_matrix(n_days, products):    return {p: [pulp.lpSum(0) for d in range(n_days)] for p in products}def shipment(n_days, products, order_dict, accept_dict):    matrix = empty_matrix(n_days, products)     for p, orders in order_dict.items():        accept = accept_dict[p]        for d, _ in enumerate(matrix[p]):            daily_orders = [                order.volume * accept[i]                for i, order in enumerate(orders)                if d == order.day            ]            matrix[p][d] = pulp.lpSum(daily_orders)    return matrixship = shipment(7, ['A'], order_dict, accept_dict)def sales(accept_dict, order_dict):    return pulp.lpSum(        order.volume * order.price * accept_dict[p][i]        for p, orders in order_dict.items()        for i, order in enumerate(orders)    )sales = sales(accept_dict, order_dict)#@dataclass#class OrderBook(BaseMatrix):#    def evaluate(self):#        self.accept_dict = accept_dict(self._dict)#        mat = self.empty_matrix()#        self.shipment = shipment(mat, self._dict, self.accept_dict)#        self.sales = sales(self.accept_dict, self._dict)