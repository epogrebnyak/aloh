Welcome to the CBC MILP Solver 
Version: 2.9.0 
Build Date: Feb 12 2015 

command line - D:\Anaconda3\lib\site-packages\pulp\apis\..\solverdir\cbc\win\64\cbc.exe C:\Users\B7E3~1\AppData\Local\Temp\814a71e9502c4deaa808da72ba835d11-pulp.mps max ratio None allow None threads None presolve on strong None gomory on knapsack on probing on branch printingOptions all solution C:\Users\B7E3~1\AppData\Local\Temp\814a71e9502c4deaa808da72ba835d11-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 115 COLUMNS
At line 4511 RHS
At line 4622 BOUNDS
At line 4741 ENDATA
Problem MODEL has 110 rows, 118 columns and 4153 elements
Coin0008I MODEL read with 0 errors
String of None is illegal for double parameter ratioGap value remains 0
String of None is illegal for double parameter allowableGap value remains 0
String of None is illegal for integer parameter threads value remains 0
String of None is illegal for integer parameter strongBranching value remains 5
Option for gomoryCuts changed from ifmove to on
Option for knapsackCuts changed from ifmove to on
Continuous objective value is 472239 - 0.00 seconds
Cgl0004I processed model has 104 rows, 117 columns (61 integer (61 of which binary)) and 3848 elements
Cbc0038I Initial state - 7 integers unsatisfied sum - 1.78323
Cbc0038I Pass   1: suminf.    0.60595 (2) obj. -454650 iterations 10
Cbc0038I Pass   2: suminf.    0.00000 (0) obj. -416273 iterations 4
Cbc0038I Solution found of -416273
Cbc0038I Relaxing continuous gives -417657
Cbc0038I Before mini branch and bound, 52 integers at bound fixed and 43 continuous
Cbc0038I Full problem 104 rows 117 columns, reduced to 19 rows 17 columns
Cbc0038I Mini branch and bound improved solution from -417657 to -460227 (0.01 seconds)
Cbc0038I Freeing continuous variables gives a solution of -460313
Cbc0038I Round again with cutoff of -461345
Cbc0038I Pass   3: suminf.    0.81343 (4) obj. -461345 iterations 5
Cbc0038I Pass   4: suminf.    1.10316 (3) obj. -461345 iterations 6
Cbc0038I Pass   5: suminf.    1.10316 (3) obj. -461345 iterations 0
Cbc0038I Pass   6: suminf.    0.56498 (3) obj. -461345 iterations 2
Cbc0038I Pass   7: suminf.    0.56498 (3) obj. -461345 iterations 0
Cbc0038I Pass   8: suminf.    1.12088 (4) obj. -461345 iterations 6
Cbc0038I Pass   9: suminf.    1.12088 (4) obj. -461345 iterations 0
Cbc0038I Pass  10: suminf.    1.40688 (4) obj. -461345 iterations 4
Cbc0038I Pass  11: suminf.    1.40688 (4) obj. -461345 iterations 0
Cbc0038I Pass  12: suminf.    0.72624 (2) obj. -461345 iterations 5
Cbc0038I Pass  13: suminf.    0.56498 (3) obj. -461345 iterations 2
Cbc0038I Pass  14: suminf.    1.12088 (4) obj. -461345 iterations 6
Cbc0038I Pass  15: suminf.    1.12088 (4) obj. -461345 iterations 0
Cbc0038I Pass  16: suminf.    1.40688 (4) obj. -461345 iterations 4
Cbc0038I Pass  17: suminf.    1.40688 (4) obj. -461345 iterations 0
Cbc0038I Pass  18: suminf.    0.72624 (2) obj. -461345 iterations 5
Cbc0038I Pass  19: suminf.    0.56498 (3) obj. -461345 iterations 2
Cbc0038I Pass  20: suminf.    1.12088 (4) obj. -461345 iterations 6
Cbc0038I Pass  21: suminf.    1.12088 (4) obj. -461345 iterations 0
Cbc0038I Pass  22: suminf.    1.40688 (4) obj. -461345 iterations 4
Cbc0038I Pass  23: suminf.    1.40688 (4) obj. -461345 iterations 0
Cbc0038I Pass  24: suminf.    0.72624 (2) obj. -461345 iterations 5
Cbc0038I Pass  25: suminf.    0.56498 (3) obj. -461345 iterations 2
Cbc0038I Pass  26: suminf.    1.12088 (4) obj. -461345 iterations 6
Cbc0038I Pass  27: suminf.    1.12088 (4) obj. -461345 iterations 0
Cbc0038I Pass  28: suminf.    1.40688 (4) obj. -461345 iterations 4
Cbc0038I Pass  29: suminf.    1.40688 (4) obj. -461345 iterations 0
Cbc0038I Pass  30: suminf.    0.72624 (2) obj. -461345 iterations 5
Cbc0038I Pass  31: suminf.    0.56498 (3) obj. -461345 iterations 2
Cbc0038I Pass  32: suminf.    1.12088 (4) obj. -461345 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 50 integers at bound fixed and 47 continuous
Cbc0038I Full problem 104 rows 117 columns, reduced to 17 rows 16 columns
Cbc0038I Mini branch and bound improved solution from -460313 to -460379 (0.03 seconds)
Cbc0038I Round again with cutoff of -463204
Cbc0038I Pass  32: suminf.    0.89830 (4) obj. -463204 iterations 0
Cbc0038I Pass  33: suminf.    1.03855 (3) obj. -463204 iterations 6
Cbc0038I Pass  34: suminf.    0.96967 (4) obj. -463204 iterations 2
Cbc0038I Pass  35: suminf.    2.27012 (10) obj. -463204 iterations 15
Cbc0038I Pass  36: suminf.    0.36400 (4) obj. -463204 iterations 15
Cbc0038I Pass  37: suminf.    0.99570 (4) obj. -463204 iterations 9
Cbc0038I Pass  38: suminf.    0.61045 (3) obj. -463204 iterations 1
Cbc0038I Pass  39: suminf.    0.17725 (1) obj. -463204 iterations 6
Cbc0038I Pass  40: suminf.    0.31250 (2) obj. -464227 iterations 2
Cbc0038I Pass  41: suminf.    1.67973 (6) obj. -463204 iterations 15
Cbc0038I Pass  42: suminf.    0.74889 (3) obj. -463204 iterations 5
Cbc0038I Pass  43: suminf.    0.47733 (3) obj. -463204 iterations 1
Cbc0038I Pass  44: suminf.    1.11418 (4) obj. -463204 iterations 4
Cbc0038I Pass  45: suminf.    2.47594 (9) obj. -463204 iterations 14
Cbc0038I Pass  46: suminf.    1.71230 (7) obj. -463204 iterations 5
Cbc0038I Pass  47: suminf.    1.57409 (6) obj. -463204 iterations 8
Cbc0038I Pass  48: suminf.    1.48342 (5) obj. -463204 iterations 4
Cbc0038I Pass  49: suminf.    1.57409 (6) obj. -463204 iterations 3
Cbc0038I Pass  50: suminf.    2.49943 (8) obj. -463204 iterations 14
Cbc0038I Pass  51: suminf.    1.01103 (5) obj. -463204 iterations 9
Cbc0038I Pass  52: suminf.    1.39574 (5) obj. -463204 iterations 9
Cbc0038I Pass  53: suminf.    0.34807 (4) obj. -463204 iterations 4
Cbc0038I Pass  54: suminf.    2.02798 (8) obj. -463204 iterations 6
Cbc0038I Pass  55: suminf.    1.73551 (6) obj. -463204 iterations 2
Cbc0038I Pass  56: suminf.    0.70357 (5) obj. -463204 iterations 4
Cbc0038I Pass  57: suminf.    0.67235 (4) obj. -463204 iterations 2
Cbc0038I Pass  58: suminf.    1.21817 (4) obj. -463204 iterations 5
Cbc0038I Pass  59: suminf.    0.34807 (4) obj. -463204 iterations 3
Cbc0038I Pass  60: suminf.    2.02798 (8) obj. -463204 iterations 6
Cbc0038I Pass  61: suminf.    1.73551 (6) obj. -463204 iterations 2
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 30 integers at bound fixed and 36 continuous
Cbc0038I Full problem 104 rows 117 columns, reduced to 55 rows 49 columns
Cbc0038I Mini branch and bound improved solution from -460379 to -463060 (0.13 seconds)
Cbc0038I Round again with cutoff of -465434
Cbc0038I Reduced cost fixing fixed 5 variables on major pass 4
Cbc0038I Pass  61: suminf.    1.01835 (4) obj. -465434 iterations 2
Cbc0038I Pass  62: suminf.    1.22630 (4) obj. -465434 iterations 4
Cbc0038I Pass  63: suminf.    1.09768 (4) obj. -465434 iterations 1
Cbc0038I Pass  64: suminf.    2.22771 (8) obj. -465434 iterations 12
Cbc0038I Pass  65: suminf.    1.48215 (6) obj. -465434 iterations 6
Cbc0038I Pass  66: suminf.    1.32036 (5) obj. -465434 iterations 4
Cbc0038I Pass  67: suminf.    0.98813 (4) obj. -465434 iterations 1
Cbc0038I Pass  68: suminf.    1.51240 (5) obj. -465434 iterations 4
Cbc0038I Pass  69: suminf.    1.29184 (4) obj. -465434 iterations 1
Cbc0038I Pass  70: suminf.    1.42447 (5) obj. -465434 iterations 3
Cbc0038I Pass  71: suminf.    2.53884 (7) obj. -465434 iterations 15
Cbc0038I Pass  72: suminf.    1.82875 (7) obj. -465434 iterations 4
Cbc0038I Pass  73: suminf.    0.87804 (4) obj. -465434 iterations 6
Cbc0038I Pass  74: suminf.    0.67937 (3) obj. -465434 iterations 1
Cbc0038I Pass  75: suminf.    1.01670 (5) obj. -465434 iterations 4
Cbc0038I Pass  76: suminf.    0.69400 (4) obj. -465434 iterations 5
Cbc0038I Pass  77: suminf.    1.32036 (5) obj. -465434 iterations 4
Cbc0038I Pass  78: suminf.    0.98813 (4) obj. -465434 iterations 1
Cbc0038I Pass  79: suminf.    1.51240 (5) obj. -465434 iterations 4
Cbc0038I Pass  80: suminf.    1.29184 (4) obj. -465434 iterations 1
Cbc0038I Pass  81: suminf.    1.42447 (5) obj. -465434 iterations 3
Cbc0038I Pass  82: suminf.    2.26436 (7) obj. -465434 iterations 7
Cbc0038I Pass  83: suminf.    1.35836 (5) obj. -465434 iterations 3
Cbc0038I Pass  84: suminf.    2.12530 (6) obj. -465434 iterations 5
Cbc0038I Pass  85: suminf.    1.63506 (5) obj. -465434 iterations 1
Cbc0038I Pass  86: suminf.    1.04986 (5) obj. -465434 iterations 1
Cbc0038I Pass  87: suminf.    2.12530 (6) obj. -465434 iterations 7
Cbc0038I Pass  88: suminf.    1.78371 (6) obj. -465434 iterations 5
Cbc0038I Pass  89: suminf.    1.78371 (6) obj. -465434 iterations 0
Cbc0038I Pass  90: suminf.    2.13679 (6) obj. -465434 iterations 6
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 35 integers at bound fixed and 38 continuous
Cbc0038I Full problem 104 rows 117 columns, reduced to 48 rows 39 columns
Cbc0038I Mini branch and bound did not improve solution (0.16 seconds)
Cbc0038I After 0.16 seconds - Feasibility pump exiting with objective of -463060 - took 0.15 seconds
Cbc0012I Integer solution of -463060.13 found by feasibility pump after 0 iterations and 0 nodes (0.16 seconds)
Cbc0038I Full problem 104 rows 117 columns, reduced to 62 rows 59 columns
Cbc0031I 19 added rows had average density of 44.578947
Cbc0013I At root node, 19 cuts changed objective from -470638.7 to -464705.59 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 2.0 elements, 2 column cuts (2 active)  in 0.054 seconds - new frequency is 2
Cbc0014I Cut generator 1 (Gomory) - 533 row cuts average 88.9 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 24 row cuts average 7.3 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 282 row cuts average 48.8 elements, 0 column cuts (0 active)  in 0.085 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 111 row cuts average 21.6 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 6 (TwoMirCuts) - 196 row cuts average 34.0 elements, 0 column cuts (0 active)  in 0.031 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, -463060.13 best solution, best possible -464705.59 (0.61 seconds)
Cbc0012I Integer solution of -464344.13 found by DiveCoefficient after 1200 iterations and 4 nodes (0.67 seconds)
Cbc0012I Integer solution of -464600.75 found by DiveCoefficient after 1203 iterations and 5 nodes (0.67 seconds)
Cbc0001I Search completed - best objective -464600.75, took 1379 iterations and 10 nodes (0.71 seconds)
Cbc0032I Strong branching done 104 times (725 iterations), fathomed 2 nodes and fixed 0 variables
Cbc0035I Maximum depth 4, 54 variables fixed on reduced cost
Cuts at root node changed objective from -470639 to -464706
Probing was tried 114 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.054 seconds)
Gomory was tried 123 times and created 540 cuts of which 0 were active after adding rounds of cuts (0.016 seconds)
Knapsack was tried 123 times and created 35 cuts of which 0 were active after adding rounds of cuts (0.049 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 123 times and created 351 cuts of which 0 were active after adding rounds of cuts (0.100 seconds)
FlowCover was tried 123 times and created 143 cuts of which 0 were active after adding rounds of cuts (0.038 seconds)
TwoMirCuts was tried 123 times and created 234 cuts of which 0 were active after adding rounds of cuts (0.031 seconds)

Result - Optimal solution found

Objective value:                464600.75000000
Enumerated nodes:               10
Total iterations:               1379
Time (CPU seconds):             0.73
Time (Wallclock seconds):       0.73

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.75   (Wallclock seconds):       0.75

